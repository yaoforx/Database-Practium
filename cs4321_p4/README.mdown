## Top Level 
Our top level interpreter/harness.java that reads the input and produces the output is called "Harness.java"
## Physical Plan Builder
Physical Plan Builder is implemented in visitors/physicalPlanBuilder.java. This class processes configureation file and assign physical operators accordingly.
## Physical Operator
Logic of extracting join conditions:
First deal with other AND conditions(if there is any) in where clause. In this way, it is able to save time for not computing tuples who do not satisfy AND conditions.Then, 'operators/JoinOperator.java' processes incoming left Tuple with left schema, right Tuple with right Schema. <br>
Used **Nested Join Loop algorithms** to formulate tuples that satisfy conditions. Whenever inner loop gets null, reset inner loop to the begining. See operators/TupleNestedJoin.java. <br>
Used **Block Nested Loop Join algorithms** to simulate main memory size  defined by configuration file. Load outer relation into 'main memory' for every innner relation. Reset inner relation whenever it is exausted and outer relation has not finished. See operators/BlockNestedJoin.java. <br>
Used **Sort Merge Join algorithms** to simulate main memory size  defined by configuration file. Assign sort operator to both left and right children. After two relations have been sorted, merge them by finding qualified tuple and reset inner relation by tuple index. See operators/SortMergeJoin.java. <br>
Used **External sort algorithms** to simulate main memory size  defined by configuration file. Sort relation by multi passed and run. Renamed the combined result as 'id_result' where id is an random integer. See operators/ExternalSort.java. <br>
**operators/IndexScanOperater.java** has been implemented for extending scan operator adapting B+ tree indexing, if configuration file specifies using indexscan, the **visitors/PhysicalPlanBuilder.java** will assign IndexScanOperator instead of full scan operator, otherwise default is full scan operator.
## B+ tree implementation
The B+ tree is built recursively based on its order. **btree/Btree.java** is the top class of building a B+ tree utilizing **bree/BtreeIndexNode.java, bree/BreeLeafNode.java** <br>
Also, there is **bree/BulkLoader.java** class to handle calling **btree/Btree.java** to buld tree based on Index requirement. If it is not clustered, it will directly build B+tree by calling **btree/Btree.java**, otherwise(clustered), it will sort table first and then build the B+tree.<br>
On the top of B+tree implementation, **util/IndexConfig.java** is responsible for storing information of every table's indexing. In this way, we can utilize this class to access every B+ tree, and it is useful for **visitors/PhysicalPlanBuilder.java**
## Optimization
In order to optimize the query runtime, this program has collected the table statistics and pre-calculated each possible query plan by using dynamic programming and union find algorithms. Please see **optimal/** and **unionfind/** for details. This program is able to select the best query plan and process queries based on this plan to minimum the I/O cost.
## Parallel Optimization
To further optimize this program, this project is implemented in parallel using multi-thread to enhance the performance, including parallel computing join operators, parallel collecting statistics, etc.
## Input and Output
Our interpreter program takes in 'input directory' as 'cs4321/project1/samples/input' and processes 'input directory' in 'util/DBCatalog.java'. If program having any trouble in finding correct path, please let us know.
##Logical Operator
Added anouther Logical Operator layer on top of the **Operator Tree** so that it refers to logical operator, and utilize **PhysicalPlanBuilder** to translate it into physical operator.
## Please note, this program runs in Java 8.
